#pragma once

// Standard config information (i.e., without us hacking it).
struct ConfigInfo
{
	// block 2: 200-26F
	uint8_t m_config200[0x70];
	// block 0: 270-2AF
	uint8_t m_config270[0x40];
	// block 1: 2B0-31F
	uint8_t m_config2B0[0x70];
	
	bool HasValidChecksums() const;
};

// Read EEPROM at a given arbitrary offset.
// The offset is given in bytes, though note that the EEPROM device is
// natively addressed in 16-bit words.
bool ReadNVM(uint8_t* output, unsigned offset, unsigned length);

// Read the standard config blocks (EEPROM 0x200-0x31F).
bool ReadAllConfig(ConfigInfo& info);

// Does the exploit to write the 0xE0 bytes of patch data.
// WARNING: THIS TRASHES RAM AFTER THE LAST WRITE BUFFER.  DO NOT OPERATE
// THE LASER WHILE RAM IS TRASHED THIS WAY.  INVALID LASER PARAMETERS COULD
// DAMAGE THE MACHINE.
bool WriteConfigExploit(const uint8_t* patchData, int& errorCode);
